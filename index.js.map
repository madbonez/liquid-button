{"mappings":"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","sources":["src/index.ts","src/utils.ts","src/stateListener.ts"],"sourcesContent":["import * as PIXI from 'pixi.js';\nimport { gsap } from 'gsap';\nimport { PixiPlugin } from \"gsap/dist/PixiPlugin\";\nimport './styles/global.css';\nimport {centerIt, drawCircle, drawCurve} from './utils';\nimport { stateListener } from './stateListener';\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\nconst RADIUS = 100;\nconst BOUNDS_RADIUS = 150;\nconst CATCH_RADIUS = 180;\n\nconst app = new PIXI.Application({antialias: true, width: 440, height: 440, backgroundColor: 0xFFFFFF});\ndocument.querySelector('#lq-button-submit').appendChild(app.view);\n\nconst container = new PIXI.Container();\ncontainer.hitArea = new PIXI.Rectangle(0, 0, 440, 440);\ncontainer.interactive = true;\n\n// сегмент круга. эффект жвачки\nconst graphicCurve = new PIXI.Graphics();\n// анимированный круг\nconst graphicCircle = new PIXI.Graphics();\n// внутри начинает притягиваться к курсору\nconst graphicsHiddenCatchCircle = new PIXI.Graphics();\n// внутри двигаем круг вместе с курсором\nconst graphicsHiddenBoundsCircle = new PIXI.Graphics();\ncontainer.addChild(graphicCurve)\ncontainer.addChild(graphicCircle)\ncontainer.addChild(graphicsHiddenCatchCircle)\ncontainer.addChild(graphicsHiddenBoundsCircle)\n\ncenterIt(graphicCurve, app)\ncenterIt(graphicCircle, app)\ncenterIt(graphicsHiddenCatchCircle, app)\ncenterIt(graphicsHiddenBoundsCircle, app)\n\nconst centerXInit = app.screen.width / 2,\n    centerYInit = app.screen.height / 2;\n\nconst\n    offsetX = app.view.getBoundingClientRect().x,\n    offsetY = app.view.getBoundingClientRect().y;\n\nconst\n    // смещение крайних точек сегмента от горизонта\n    degreeOffset = 30,\n    circleLeft = 180,\n    circleRight = 0;\nlet\n    anchor1X,\n    anchor1Y,\n    anchor2X,\n    anchor2Y,\n    anchorMiddleX,\n    anchorMiddleY,\n    centerX,\n    centerY;\n\ngraphicsHiddenCatchCircle.beginFill(0, 0.101);\ngraphicsHiddenCatchCircle.drawCircle(centerXInit, centerYInit, CATCH_RADIUS);\ngraphicsHiddenCatchCircle.endFill();\n\ngraphicsHiddenBoundsCircle.beginFill(0, 0.101);\ngraphicsHiddenBoundsCircle.drawCircle(centerXInit, centerYInit, BOUNDS_RADIUS);\ngraphicsHiddenBoundsCircle.endFill();\n\napp.stage.addChild(container);\n\nconst circleProps = {\n    centerX: centerXInit,\n    centerY: centerYInit,\n    radius: RADIUS,\n}\n\nconst curveProps = {\n    anchorX: centerXInit,\n    anchorY: centerYInit,\n    anchor1X: centerXInit,\n    anchor1Y: centerYInit,\n    anchor2Y: centerYInit,\n    anchor2X: centerXInit,\n}\n\ndrawCircle(circleProps, graphicCircle);\nconst stateListenerHandler = stateListener(centerXInit, centerYInit, circleProps, curveProps, RADIUS, BOUNDS_RADIUS, CATCH_RADIUS);\n\ncontainer.on('mousemove', (e: PIXI.FederatedPointerEvent) => {\n    let\n        pointerX = e.x - offsetX,\n        pointerY = e.y - offsetY;\n\n    const pointerInsideMagnitudeBounds = graphicsHiddenCatchCircle.containsPoint({\n        x: pointerX,\n        y: pointerY\n    });\n\n    const pointerInsideCircleBounds = graphicsHiddenBoundsCircle.containsPoint({\n        x: pointerX,\n        y: pointerY\n    });\n\n    let nextState;\n\n    if (pointerInsideMagnitudeBounds) {\n        nextState = 'entered';\n    }\n\n    if (pointerInsideCircleBounds) {\n        nextState = 'inside';\n    }\n\n    if (!pointerInsideMagnitudeBounds && !pointerInsideCircleBounds) {\n        nextState = 'outside';\n    }\n\n    if (nextState) {\n        stateListenerHandler(nextState, pointerX, pointerY, e.movement.x, e.movement.y);\n    }\n})\n\n// main animation loop\napp.ticker.add(() => {\n    drawCircle(circleProps, graphicCircle);\n    drawCurve(curveProps, graphicCurve);\n})\n\n","export function centerIt(graphics, pixiApp) {\n    graphics.position.x = pixiApp.screen.width / 2;\n    graphics.position.y = pixiApp.screen.height / 2;\n    graphics.pivot.x = pixiApp.screen.width / 2;\n    graphics.pivot.y = pixiApp.screen.height / 2;\n}\n\nexport function drawCircle(circleProps, graphicCircle) {\n    graphicCircle.clear();\n    graphicCircle.beginFill(0xAA4F08, 1);\n    graphicCircle.drawCircle(circleProps.centerX, circleProps.centerY, circleProps.radius);\n    graphicCircle.endFill();\n}\n\nexport function drawCurve(curveProps, graphicCurve) {\n    graphicCurve.clear();\n    graphicCurve.beginFill(0xAA4F08, 1);\n    graphicCurve.moveTo(curveProps.anchor1X, curveProps.anchor1Y)\n    graphicCurve.quadraticCurveTo(curveProps.anchorX, curveProps.anchorY, curveProps.anchor2X, curveProps.anchor2Y)\n    graphicCurve.endFill();\n}\n\n\n","import {gsap, Power2} from 'gsap';\n\nexport const stateListener = (centerXInit: number, centerYInit: number, circleProps: any, curveProps: any, circleRadius: number, boundsRadius: number, catchRadius: number) => {\n    let leaveTl;\n    let insideTl;\n    let lastState = 'outside';\n    let centerX = centerXInit;\n    let centerY = centerYInit;\n\n    return (newSate: 'outside' | 'inside' | 'entered', pointerX: number, pointerY: number, deltaX: number, deltaY: number) => {\n\n\n        let pointerAngle = Math.atan2(pointerY - centerY, pointerX - centerX) * 180 / Math.PI;\n        pointerAngle = pointerAngle < 0 ? pointerAngle + 360 : pointerAngle\n        pointerAngle = pointerAngle * Math.PI / 180\n\n        if (lastState !== 'outside' && newSate === 'outside') {\n            centerX = centerXInit;\n            centerY = centerYInit;\n\n            let anchor1X = centerX + circleRadius * Math.cos(Math.PI *2/ 5 + pointerAngle);\n            let anchor1Y = centerY + circleRadius * Math.sin(Math.PI *2/ 5 + pointerAngle);\n            let anchor2X = centerX + circleRadius * Math.cos(-Math.PI *2/ 5 + pointerAngle);\n            let anchor2Y = centerY + circleRadius * Math.sin(-Math.PI *2/ 5 + pointerAngle);\n            let anchorX = centerX;\n            let anchorY = centerY;\n\n            leaveTl = gsap.timeline();\n            leaveTl\n                .add('start')\n                .to(curveProps, {\n                    anchor1X,\n                    anchor1Y,\n                    anchor2Y,\n                    anchor2X,\n                    anchorX,\n                    anchorY,\n                    delay: 0.3,\n                    ease: \"power2.in\",\n                    duration: 0.5\n                })\n                .to(circleProps, {\n                    centerX,\n                    centerY,\n                    ease: \"power2.in\",\n                    delay: 0.3,\n                    duration: 0.5\n                }, 'start');\n\n\n        }\n\n        if (newSate === 'entered') {\n            let newX = boundsRadius * Math.cos(pointerAngle) + centerXInit;\n            let newY = boundsRadius * Math.sin(pointerAngle) + centerYInit;\n\n            let newCenterX = newX - circleRadius * Math.cos(pointerAngle)\n            let newCenterY = newY - circleRadius * Math.sin(pointerAngle)\n\n            centerX = newCenterX;\n            centerY = newCenterY;\n\n            let anchor1X = centerX + circleRadius * Math.cos(Math.PI *2/ 5 + pointerAngle);\n            let anchor1Y = centerY + circleRadius * Math.sin(Math.PI *2/ 5 + pointerAngle);\n            let anchor2X = centerX + circleRadius * Math.cos(-Math.PI *2/ 5 + pointerAngle);\n            let anchor2Y = centerY + circleRadius * Math.sin(-Math.PI *2/ 5 + pointerAngle);\n            let anchorX = 2 * pointerX - centerX;\n            let anchorY = 2 * pointerY - centerY;\n\n            gsap.to(circleProps, {\n                centerX,\n                centerY,\n                //    ease: \"power2.in\",\n                duration: 0.5\n            })\n            gsap.to(curveProps, {\n                anchor1X,\n                anchor1Y,\n                anchor2Y,\n                anchor2X,\n                anchorX,\n                anchorY,\n                //      ease: \"power2.in\",\n                duration: 0.5\n            })\n\n        }\n\n        if (lastState !== 'inside' && newSate === 'inside') {\n            // первый раз отлепить от границы\n            centerX = centerX < 200 ? centerX + 1 : centerX - 1;\n            centerY = centerY < 200 ? centerY + 1 : centerY - 1;\n            let anchor1X = centerX + circleRadius * Math.cos(Math.PI *2/ 5 + pointerAngle);\n            let anchor1Y = centerY + circleRadius * Math.sin(Math.PI *2/ 5 + pointerAngle);\n            let anchor2X = centerX + circleRadius * Math.cos(-Math.PI *2/ 5 + pointerAngle);\n            let anchor2Y = centerY + circleRadius * Math.sin(-Math.PI *2/ 5 + pointerAngle);\n            let anchorX = centerX;\n            let anchorY = centerY;\n\n            insideTl = gsap.timeline()\n                .to(circleProps, {\n                    centerX,\n                    centerY,\n                    ease: Power2.easeOut,\n                });\n            gsap.to(curveProps, {\n                anchor1X,\n                anchor1Y,\n                anchor2Y,\n                anchor2X,\n                anchorX,\n                anchorY,\n                ease: Power2.easeOut,\n            })\n        }\n\n        if (lastState === 'inside' && newSate === 'inside') {\n            let newCenterX = centerX + deltaX * (boundsRadius - circleRadius) / boundsRadius\n            let newCenterY = centerY + deltaY * (boundsRadius - circleRadius) / boundsRadius\n            centerX = newCenterX;\n            centerY = newCenterY;\n\n            let anchor1X = centerX + circleRadius * Math.cos(Math.PI *2/ 5 + pointerAngle);\n            let anchor1Y = centerY + circleRadius * Math.sin(Math.PI *2/ 5 + pointerAngle);\n            let anchor2X = centerX + circleRadius * Math.cos(-Math.PI *2/ 5 + pointerAngle);\n            let anchor2Y = centerY + circleRadius * Math.sin(-Math.PI *2/ 5 + pointerAngle);\n            let distanceBetweenCenterMouse = Math.ceil(Math.sqrt(Math.pow((pointerX - centerXInit), 2) + Math.pow((pointerY - centerYInit), 2)))\n            let anchorX\n            let anchorY\n            if (distanceBetweenCenterMouse > boundsRadius - 20) {\n                anchorX = 2 * pointerX - centerX;\n                anchorY = 2 * pointerY - centerY;\n            } else {\n                anchorX = centerX;\n                anchorY = centerY;\n            }\n\n            gsap.to(circleProps, {\n                centerX,\n                centerY,\n                ease: 'none',\n            })\n            gsap.to(curveProps, {\n                anchor1X,\n                anchor1Y,\n                anchor2Y,\n                anchor2X,\n                anchorX,\n                anchorY,\n                duration: 0.5,\n                ease: 'none',\n            })\n            //  }\n        }\n        lastState = newSate;\n    }\n}\n"],"names":[],"version":3,"file":"index.js.map"}